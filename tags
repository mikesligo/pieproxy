!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
DEFAULT_LOG_FILENAME	ref/working.py	/^DEFAULT_LOG_FILENAME = "proxy.log"$/;"	v
DevNull	ref/working.py	/^    class DevNull (object):$/;"	c	function:daemonize
ErrorLog	ref/working.py	/^    class ErrorLog:$/;"	c	function:daemonize
Forward	ref/100.py	/^class Forward:$/;"	c
Packet	pie.py	/^class Packet:$/;"	c
ProxyHandler	ref/working.py	/^class ProxyHandler (BaseHTTPServer.BaseHTTPRequestHandler):$/;"	c
Server	pie.py	/^class Server:$/;"	c
TheServer	ref/100.py	/^class TheServer:$/;"	c
ThreadingHTTPServer	ref/working.py	/^                           BaseHTTPServer.HTTPServer):$/;"	c
__base	ref/working.py	/^    __base = BaseHTTPServer.BaseHTTPRequestHandler$/;"	v	class:ProxyHandler
__base_handle	ref/working.py	/^    __base_handle = __base.handle$/;"	v	class:ProxyHandler
__init__	pie.py	/^    def __init__(self, host, port):$/;"	m	class:Server
__init__	pie.py	/^    def __init__(self, packet):$/;"	m	class:Packet
__init__	ref/100.py	/^    def __init__(self):$/;"	m	class:Forward
__init__	ref/100.py	/^    def __init__(self, host, port):$/;"	m	class:TheServer
__init__	ref/ref.py	/^    def __init__ (self, host, port):$/;"	m	class:proxy_server
__init__	ref/ref.py	/^    def __init__ (self, receiver, address):$/;"	m	class:proxy_sender
__init__	ref/ref.py	/^    def __init__ (self, server, (conn, addr)):$/;"	m	class:proxy_receiver
__init__	ref/working.py	/^        def __init__ (self): self.fd = os.open ("\/dev\/null", os.O_WRONLY)$/;"	m	class:daemonize.DevNull
__init__	ref/working.py	/^        def __init__ (self, obj): self.obj = obj$/;"	m	class:daemonize.ErrorLog
__init__	ref/working.py	/^    def __init__ (self, server_address, RequestHandlerClass, logger=None):$/;"	m	class:ThreadingHTTPServer
__version__	ref/working.py	/^__version__ = "0.3.1"$/;"	v
_connect_to	ref/working.py	/^    def _connect_to(self, netloc, soc):$/;"	m	class:ProxyHandler
_read_write	ref/working.py	/^    def _read_write(self, soc, max_idling=20, local=False):$/;"	m	class:ProxyHandler
buffer_size	ref/100.py	/^buffer_size = 4096$/;"	v
channel	ref/100.py	/^    channel = {}$/;"	v	class:TheServer
channel_counter	ref/ref.py	/^    channel_counter = 0$/;"	v	class:proxy_receiver
close	ref/working.py	/^        def close (self): os.close (self.fd)$/;"	m	class:daemonize.DevNull
close	ref/working.py	/^        def close (self): pass$/;"	m	class:daemonize.ErrorLog
collect_incoming_data	ref/ref.py	/^    def collect_incoming_data (self, data):$/;"	m	class:proxy_receiver
collect_incoming_data	ref/ref.py	/^    def collect_incoming_data (self, data):$/;"	m	class:proxy_sender
daemonize	ref/working.py	/^def daemonize (logger):$/;"	f
delay	ref/100.py	/^delay = 0.0001$/;"	v
do_CONNECT	ref/working.py	/^    def do_CONNECT(self):$/;"	m	class:ProxyHandler
do_DELETE	ref/working.py	/^    do_DELETE=do_GET$/;"	v	class:ProxyHandler
do_GET	ref/working.py	/^    def do_GET(self):$/;"	m	class:ProxyHandler
do_HEAD	ref/working.py	/^    do_HEAD = do_GET$/;"	v	class:ProxyHandler
do_POST	ref/working.py	/^    do_POST = do_GET$/;"	v	class:ProxyHandler
do_PUT	ref/working.py	/^    do_PUT  = do_GET$/;"	v	class:ProxyHandler
fileno	ref/working.py	/^        def fileno (self): return self.fd$/;"	m	class:daemonize.DevNull
forward_to	ref/100.py	/^forward_to = ('smtp.zaz.ufsk.br', 25)$/;"	v
found_terminator	ref/ref.py	/^    def found_terminator (self):$/;"	m	class:proxy_receiver
found_terminator	ref/ref.py	/^    def found_terminator (self):$/;"	m	class:proxy_sender
handle	ref/working.py	/^    def handle(self):$/;"	m	class:ProxyHandler
handle_accept	ref/ref.py	/^    def handle_accept (self):$/;"	m	class:proxy_server
handle_close	ref/ref.py	/^    def handle_close (self):$/;"	m	class:proxy_receiver
handle_close	ref/ref.py	/^    def handle_close (self):$/;"	m	class:proxy_sender
handle_connect	ref/ref.py	/^    def handle_connect (self):$/;"	m	class:proxy_sender
handler	ref/working.py	/^def handler (signo, frame):$/;"	f
host	pie.py	/^    host = socket.gethostname() # Get local machine name$/;"	v	class:Server
input_list	ref/100.py	/^    input_list = []$/;"	v	class:TheServer
logSetup	ref/working.py	/^def logSetup (filename, log_size, daemon):$/;"	f
log_error	ref/working.py	/^    def log_error (self, format, *args):$/;"	m	class:ProxyHandler
log_message	ref/working.py	/^    def log_message (self, format, *args):$/;"	m	class:ProxyHandler
main	ref/working.py	/^def main ():$/;"	f
main_loop	ref/100.py	/^    def main_loop(self):$/;"	m	class:TheServer
on_accept	ref/100.py	/^    def on_accept(self):$/;"	m	class:TheServer
on_close	ref/100.py	/^    def on_close(self):$/;"	m	class:TheServer
on_recv	ref/100.py	/^    def on_recv(self):$/;"	m	class:TheServer
port	pie.py	/^    port = 8000                # Reserve a port for your service.$/;"	v	class:Server
printpacket	pie.py	/^    def printpacket(self):$/;"	m	class:Packet
proxy_receiver	ref/ref.py	/^class proxy_receiver (asynchat.async_chat):$/;"	c
proxy_sender	ref/ref.py	/^class proxy_sender (asynchat.async_chat):$/;"	c
proxy_server	ref/ref.py	/^class proxy_server (asyncore.dispatcher):$/;"	c
rbufsize	ref/working.py	/^    rbufsize = 0                        # self.rfile Be unbuffered$/;"	v	class:ProxyHandler
read	ref/working.py	/^        def read (self, *args, **kwargs): return 0$/;"	m	class:daemonize.DevNull
read	ref/working.py	/^        def read (self, *args, **kwargs): return 0$/;"	m	class:daemonize.ErrorLog
receive	pie.py	/^    def receive(self):$/;"	m	class:Server
s	ref/tmp.py	/^s = socket.socket()$/;"	v
server	pie.py	/^    server = Server(host,port)$/;"	v	class:Server
server_version	ref/working.py	/^    server_version = "TinyHTTPProxy\/" + __version__$/;"	v	class:ProxyHandler
start	ref/100.py	/^    def start(self, host, port):$/;"	m	class:Forward
usage	ref/working.py	/^def usage (msg=None):$/;"	f
write	ref/working.py	/^        def write (self, *args, **kwargs): return 0$/;"	m	class:daemonize.DevNull
write	ref/working.py	/^        def write (self, string): self.obj.log (logging.ERROR, string)$/;"	m	class:daemonize.ErrorLog
